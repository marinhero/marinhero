<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Marín Alcaraz</title>
    <link>https://marinhero.com/posts/</link>
    <description>Recent content in Posts on Marín Alcaraz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Jan 2016 01:57:51 +0000</lastBuildDate>
    
	<atom:link href="https://marinhero.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sieve of Eratosthenes</title>
      <link>https://marinhero.com/posts/sieve-of-eratosthenes/</link>
      <pubDate>Sun, 03 Jan 2016 01:57:51 +0000</pubDate>
      
      <guid>https://marinhero.com/posts/sieve-of-eratosthenes/</guid>
      <description>I had a bad experience with the Sieve of Eratosthenes during a college test, I became traumatized by it and tried to avoid it. During this holiday break I decided to face my fears (lol) and successfully implemented it ruby (not very idiomatic but ruby still)
My favorite parts of this algorithm were:
 The fact that I don&amp;rsquo;t have to iterate the whole sieve! I can do it just for _sqrt(n) _since the factors of any number are always composed by two numbers and one of them is always lower than the sqrt of any given number n.</description>
    </item>
    
    <item>
      <title>An important note about slices in Go</title>
      <link>https://marinhero.com/posts/an-important-note-about-slices-in-go/</link>
      <pubDate>Fri, 23 Jan 2015 20:59:02 +0000</pubDate>
      
      <guid>https://marinhero.com/posts/an-important-note-about-slices-in-go/</guid>
      <description>I&amp;rsquo;m new in Go and this seems important so it&amp;rsquo;s better to digest it and point it out.
A slice is not an array. A slice describes a piece of an array. Its internal structure can be described as the following:
type sliceHeader struct { Length int ZerothElement *byte //Assuming that the array that we are pointing to has byte type. }  It&amp;rsquo;s important to note that there is a pointer inside the structure, but what implications can that have?</description>
    </item>
    
    <item>
      <title>A Client / Server prototype in Go</title>
      <link>https://marinhero.com/posts/a-client-server-prototype-in-go/</link>
      <pubDate>Wed, 21 Jan 2015 20:39:20 +0000</pubDate>
      
      <guid>https://marinhero.com/posts/a-client-server-prototype-in-go/</guid>
      <description>I started my batch at Recurse Center two weeks ago. One of my goals for the batch is to become proficient in go. To get started I went through &amp;ldquo;A tour of Go&amp;rdquo;, after that I decided to work on my first Go project.
The project was a Client / Server conversation, a limited conversation. As a client you are able to connect to an IP:PORT server and send three commands to the server: {1: ls, 2: who, 3: pwd}.</description>
    </item>
    
    <item>
      <title>Connect to Airport Extreme Shared Disk from Linux</title>
      <link>https://marinhero.com/posts/connect-to-airport-extreme-shared-disk-from-linux/</link>
      <pubDate>Sat, 18 Jan 2014 04:32:25 +0000</pubDate>
      
      <guid>https://marinhero.com/posts/connect-to-airport-extreme-shared-disk-from-linux/</guid>
      <description>Recently I bought an Apple Airport Extreme to improve WiFi connectivity at home, I&amp;rsquo;m very happy with the results!
Airport Extreme allows you to share a hard drive over the network, since one of my computers runs Linux I decided to modify my fstab to auto mount the sared drive into the Linux box.
Check it out:
sudo mkdir /media/airport sudo vim /etc/fstab  Add the following information at the end of that file (in one line):</description>
    </item>
    
    <item>
      <title>Violent Python Chapter #1 Final</title>
      <link>https://marinhero.com/posts/violent-python-chapter-1-final/</link>
      <pubDate>Thu, 17 Oct 2013 16:13:00 +0000</pubDate>
      
      <guid>https://marinhero.com/posts/violent-python-chapter-1-final/</guid>
      <description>And that&amp;rsquo;s all for the chapter #1! The last exercise was fun as well. It is a Zip file cracker.
&amp;lt;code&amp;gt; # Violent Python # Chapter #1 # Exercise #3 Zip file cracker # By: Marin Alcaraz import zipfile import sys def decrypt_file(filename): zFile = zipfile.ZipFile(filename) dict_file = open(&amp;quot;dict.txt&amp;quot;, &#39;r&#39;) print &amp;quot;[*] Decrypting file...&amp;quot; for line in dict_file.readlines(): password = line.strip(&#39;\n&#39;) try: zFile.extractall(pwd=password) return password except Exception, e: pass def main(): if (len(sys.</description>
    </item>
    
    <item>
      <title>Violent Python Chapter #1 Part 2</title>
      <link>https://marinhero.com/posts/violent-python-chapter-1-part-2/</link>
      <pubDate>Wed, 16 Oct 2013 15:09:34 +0000</pubDate>
      
      <guid>https://marinhero.com/posts/violent-python-chapter-1-part-2/</guid>
      <description>I&amp;rsquo;ve finished the second exercise from Violent Python&amp;rsquo;s Chapter #1 &amp;ldquo;The cuckoo&amp;rsquo;s egg&amp;rdquo;, it is a password decrypter. Here&amp;rsquo;s the code:
&amp;lt;code&amp;gt; # # Violent Python Chapter #1 # The Cuckoo&#39;s Egg: a simple password decrypter # By: Marin Alcaraz # import crypt import hashlib def testPass(cryptPass): salt = cryptPass[0:2] dictFile = open(&#39;dictionary.txt&#39;, &#39;r&#39;) for word in dictFile.readlines(): word = word.strip(&#39;\n&#39;) cryptWord = crypt.crypt(word, salt) if (cryptWord == cryptPass or hashlib.</description>
    </item>
    
    <item>
      <title>Violent Python Chapter #1 Part 1</title>
      <link>https://marinhero.com/posts/violent-python-chapter-1/</link>
      <pubDate>Sun, 06 Oct 2013 18:04:36 +0000</pubDate>
      
      <guid>https://marinhero.com/posts/violent-python-chapter-1/</guid>
      <description>Violent Python Chapter #1
I&amp;rsquo;ll try to post a some excerpts about the book Violent Python here.
This posts references the first part of chapter #1.
In chapter one you work on three mini projects:
 Vulnerability Scanner The Cuckoo&amp;rsquo;s egg Zip file Cracker  The first exercise aims to build a vulnerability scanner. You are supposed to read full of vulnerable program definitions and compare it against services running in a remote server.</description>
    </item>
    
    <item>
      <title>Django-Vim code autocomplete</title>
      <link>https://marinhero.com/posts/django-vim-code-autocomplete/</link>
      <pubDate>Sun, 08 Sep 2013 20:12:39 +0000</pubDate>
      
      <guid>https://marinhero.com/posts/django-vim-code-autocomplete/</guid>
      <description>Recently I came back to Django development and after a year my set of tools had change a lot. Mainly because vim became my main text editor.
The following lines of code will turn vim into a more powerful tool to work with Django and Python, place them inside your .vimrc:
&amp;lt;code&amp;gt;&amp;quot;--ENABLE PYTHON/DJANGO OMNICOMPLETE filetype plugin on set omnifunc=syntaxcomplete#Complete autocmd FileType python set omnifunc=pythoncomplete#Complete autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS autocmd FileType html set omnifunc=htmlcomplete#CompleteTags autocmd FileType css set omnifunc=csscomplete#CompleteCSS &amp;quot;--SuperTab Integration set completeopt-=previewtj let g:SuperTabDefaultCompletionType = &amp;quot;&amp;quot; let g:SuperTabDefaultCompletionType = &amp;quot;context&amp;quot; &amp;lt;/code&amp;gt;  First lines are activating the Omni Completion feature of Vim for those type of files and the last lines reference Super Tab which installed as a plugin.</description>
    </item>
    
  </channel>
</rss>